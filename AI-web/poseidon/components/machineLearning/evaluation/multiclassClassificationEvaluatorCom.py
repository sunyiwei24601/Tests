# -*- coding: utf-8 -*-
'''
evaluate the performance of the model by predictions
'''
from pyspark.ml.evaluation import MulticlassClassificationEvaluator
from poseidon.util.sparkUtil import SparkUtil

import json

class MulticlassClassificationEvaluatorCom():
    @staticmethod
    def getMulticlassClassificationEvaluator(opt):
        evaluator = MulticlassClassificationEvaluator(predictionCol=opt.get("predictionCol", "prediction"),
                                               labelCol=opt.get("labelCol", "label"),
                                               metricName=opt.get("metricName", "f1"))
        return evaluator
    '''
    tid:the node id
    jobj:options ie attributes of this component
    ins is a dict contains:
        in1:xxx   the predictions is going to be evaluated
    outs is a array contains:
        out1      return a real number stands for the result
    '''
    @staticmethod
    def multiclassClassificationEvaluatorComProcesser(tid, jobj, ins, outs, f,username,taskname):
        try:
            f.write('\n#####正在检查多分类评估组件的参数:\n')
            f.write('tid:%s\n'%tid)
            f.write('jobj:%s\n'%json.dumps(jobj))
            f.write('ins:%s\n'%ins.__str__())
            f.write('outs:%s\n'%outs.__str__())

            (conf, spark, sc) = SparkUtil.getSpark()
            res = {}
            in1 = ins['in1'] # predictions generated by model transformation
            comOpts = jobj.get('optsEntity') #user-defined opts

            evaluator = MulticlassClassificationEvaluatorCom.getMulticlassClassificationEvaluator(comOpts)
            f.write('\n#####创建多分类评估成功！\n')
            result = evaluator.evaluate(in1)
            f.write('\n#####评估预测结果为：%s' % str(result))
            if 'out1' in outs:
                key = '%s:%s' % (tid,'out1')
                res[key] = result
            elif not outs:
                #if no out pipeline in the outs,we return out1 by default
                key = '%s:%s' % (tid,'out1')
                res[key] = result
            f.write('\n#####多分类评估组件输出为:\n%s' % res.__str__())
            return res
        except Exception as e:
            print("*****************Sorry:\n %s" % e)
            f.write("*****************Sorry:\n %s" % e)
            # f.close()
            return 0